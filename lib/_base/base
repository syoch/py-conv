#pragma once
#ifndef __BASE_H__
#define __BASE_H__

#include <map>    // Dict
#include <string> // str
#include <any>    // Other
#include <utility>// Other

#define dict std::map<str,Any>

class Any;

class str: public std::string{
    using std::string::string;
public:
    str(Any& obj): str(obj.toStr()){}
};

class Any: public std::any{
    using std::any::any;

public:
    str toStr(){
        if(type() == typeid(str)){
            return std::any_cast<str>(*this);
        }else if(type() == typeid(char*)){
            return str(std::any_cast<char*>(*this));
        }else if(type() == typeid(const char*)){
            return str(std::any_cast<const char*>(*this));
        }else{
            throw str("Unknown Type")+str(type().name());
        }
    }
    const char* toString(){
        static str tmp = toStr();
        return tmp.c_str();
    }
    Any replace(str from,str to){
        str tmp;
        str src=toStr();
        int srclen=src.length();
        int fromlen=from.length();
        
        for(int i=0; i<srclen; i++){
            if(src.substr(i,fromlen)==from){
                tmp+=to;
                i+=fromlen-1;
            }else{
                tmp+=src[i];
            }
        }

        return Any(tmp);
    }
    Any replace(Any from,Any to){
        return replace(from.toStr(),to.toStr());
    }

    Any operator+(Any target){
        if(type() != target.type()){
            throw std::string("Not Supported Add (")+type()+std::string(", ")+target.type()+std::string(")");
        }
        if(type() == typeid(str)){}
    }
};

#endif